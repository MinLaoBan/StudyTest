package comitheima.TwelveDay_Test.Thread_Runnable_Lock;

/**
 * 小明上课时打瞌睡,被老师发现,老师惩罚他抄写100遍单词"HelloWorld",而且老师每发现一个同学,惩罚的次数和抄写的内容都不一样。恰好今天学习多线程,于是乎小明就找到了小王帮助他一起抄写单词请使用多线程模拟小明抄单词的任务
 * 程序运行效果如下图：要求轮流写，要求平均分配每人抄写50次
 *
 * 
 * 能够使用Lock锁解决多线程轮流抄写单词问题。
 *
 * 定义类描述抄写次数和抄写内容。定义线程任务类，开启2个线程执行线程任务,是Lock锁实现轮流抄写。
 */
//3、定义测试类Test
public class Test {
    public static void main(String[] args) {
        //3.1、创建惩罚类Punishment的对象,初始化抄写次数为100,抄写内容为HelloWorld
        Punishment punishment = new Punishment(100,"helloWord");
        //3.2、创建线程任务CopyRunnable类的对象，传递惩罚类Punishment的对象
        CopyRunnable copyRunnable = new CopyRunnable(punishment);
        //3.3、创建2个Thread类的对象，传递线程任务CopyRunnable类的对象并指定线程名称
        Thread t1 = new Thread(copyRunnable,"美女");
        Thread t2 = new Thread(copyRunnable,"骚男");
        //3.4、2个Thread类的对象分别调用start方法，开启线程
        t1.start();
        t2.start();
    }
}



package comitheima.TwelveDay_Test.Thread_Runnable_Lock;

import java.sql.Connection;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class CopyRunnable implements Runnable{
    //定义标记
    private boolean flag = true;
    //2.1、定义Punishment类型成员变量punishment
    Punishment punishment = new Punishment();
    //2.2、定义Lock锁对象
    private Lock lock = new ReentrantLock();
    //2.3、定义监视器对象
    private Condition conA = lock.newCondition();
    private Condition conB = lock.newCondition();
    //2.5、定义构造方法，给成员变量punishment赋值

    public CopyRunnable(Punishment punishment) {
        this.punishment = punishment;
    }

    @Override
    public void run() {
        //定义int变量,统计每个线程的书写次数
        int count = 0;
        //获取线程名称
        String name = Thread.currentThread().getName();
        while (true){
            try {
                lock.lock();
                if (punishment.getLeftCount() <= 0){
                    conA.signal();
                    conB.signal();
                    break;
                }
                //如果没有写完
                if (flag){
                    //获取剩余次数
                    int leftCount = punishment.getLeftCount();
                    System.out.println(name + "线程，抄写一边" + punishment.getCopyWord() + "两人总共还需抄写" + (--leftCount) + "次");
                    //修改剩余次数
                    punishment.setLeftCount(leftCount);
                    //计数器加1
                    count++;
                    //修改标记
                    flag = false;
                    //唤醒对方
                    conB.signal();
                    //当前线程等待
                    conA.await();

                }else {
                    //获取剩余次数
                    int leftCount = punishment.getLeftCount();
                    System.out.println(name + "线程，抄写一边" + punishment.getCopyWord() + "两人总共还需抄写" + (--leftCount) + "次");
                    //修改剩余次数
                    punishment.setLeftCount(leftCount);
                    //计数器加1
                    count++;
                    //修改标记
                    flag = true;
                    //唤醒对方
                    conA.signal();
                    //当前线程等待
                    conB.await();
                }
            }catch (Exception e){
                e.printStackTrace();
            }finally {
                lock.unlock();
            }
        }
        //输出每个线程的书写次数
        System.out.println(name + "线程写了" + count + "次");
    }
}


package comitheima.TwelveDay_Test.Thread_Runnable_Lock;

public class Punishment {
    private int leftCount;//抄写次数
    private String copyWord;//抄写内容

    //1.3、 定义构造方法，给初始化抄写次数和抄写内容
    public Punishment() {
    }

    public Punishment(int leftCount, String copyWord) {
        this.leftCount = leftCount;
        this.copyWord = copyWord;
    }

    public int getLeftCount() {
        return leftCount;
    }

    public void setLeftCount(int leftCount) {
        this.leftCount = leftCount;
    }

    public String getCopyWord() {
        return copyWord;
    }

    public void setCopyWord(String copyWord) {
        this.copyWord = copyWord;
    }
}
