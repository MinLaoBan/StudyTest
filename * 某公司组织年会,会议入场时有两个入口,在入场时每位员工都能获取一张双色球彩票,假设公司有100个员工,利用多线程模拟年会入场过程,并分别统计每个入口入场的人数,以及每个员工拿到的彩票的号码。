package comitheima.TenDay_Test.Thread_lotteryTicket;

import java.util.*;

public class DoubleColorBallUtils {
    //构造方法私有

    public DoubleColorBallUtils() {
    }

    //定义静态方法create，产生一个双色球，返回string
    public static String create(){
        //创建Random对象,产生int数字
        Random r = new Random();
        //创建list集合对象，存储双色球
        List<String> list = new ArrayList<>();
        while (list.size() < 6){
            //产生1-33的数字
           int num = r.nextInt(33)+1;
           //保证是两位数字，一位数前面补零
            String strNum = num<10 ? 0 + "" + num : num + "";
            //保证红球不重复
            if (!list.contains(strNum)){
                list.add(strNum);
            }
        }
        //对红球按照从小到大的顺序排列
        Collections.sort(list);
        //产生一个蓝球
        int num = r.nextInt(16)+1;
        //保证是两位数字，一位数字前面补零
        String strNum = num < 10 ? 0 + "" + num : num + "";
        //添加篮球
        list.add(strNum);
        //返回String
        return list.toString();
    }
}
package comitheima.TenDay_Test.Thread_lotteryTicket;

import java.util.List;
import java.util.Random;

public class EntranceTask implements Runnable{
    private int num;//代表出场人数
    //定义List类型成员变量doubleColorBalls,存放num张彩票
    private List<String> doubleColorBalls;
    //定义构造方法，给成员变量赋值，确定入场人数，准备彩票
    public EntranceTask() {
    }

    public EntranceTask(int num, List<String> doubleColorBalls) {
        this.num = num;
        this.doubleColorBalls = doubleColorBalls;
    }
    //2.4、 覆盖重写run方法（使用同步方法或同步代码块保证数据安全），按照打印要求实现功能（死循环内部嵌套 同步）
    @Override
    public void run() {
        //定义int变量count，记录每个入口进入的人数
        int count = 0;
        //获取当前线程名称
        String threadName = Thread.currentThread().getName();
        while (true){
            synchronized (this){
                //2.4.2、 所有人员都已经入场，结束循环
                if (num <= 0){
                    break;
                }
                //有人员入场，随机抽取一个双色球（抽一个双色球，就少一个）
                //产生一个随机索引
                int index = new Random().nextInt(doubleColorBalls.size());
                //获取一张双色球
                String doubleColorBallNumber = doubleColorBalls.remove(index);
                //打印输出
                System.out.println("编号为：" + (num--) + "的员工 从" + threadName + "入场，拿到的双色球彩票是：" + doubleColorBallNumber);
                //计数器+1
                count++;
            }
        }
        //循环结束，打印每个入口进入的人数
        System.out.println("从" + threadName + "进入的员工总共有" + count + "人");
    }
}

package comitheima.TenDay_Test.Thread_lotteryTicket;
/**
 * 某公司组织年会,会议入场时有两个入口,在入场时每位员工都能获取一张双色球彩票,假设公司有100个员工,利用多线程模拟年会入场过程,并分别统计每个入口入场的人数,以及每个员工拿到的彩票的号码。
 * 双色球球规则:
 * 双色球: 由6个红色球号码和1个蓝色球号码组成。
 * 红色球: 从1--33中选择。
 * 蓝色球: 从1--16中选择。
 * 红球从小到大的顺序,不可重复,蓝球和红球可以重复
 * 线程运行后打印格式如下：不要求两个入口轮流进，不要求平均分配进入人数
 *
 *
 *
 * 1、定义工具类DoubleColorBallUtils,产生双色球
 * 1.1、 构造方法私有
 * 1.2、 定义静态方法create,产生一个双色球,返回String
 * 2、定义线程任务类EntranceTask,实现Runnable接口
 * 2.1、 定义int类型成员变量num，代表入场人数
 * 2.2、 定义List类型成员变量doubleColorBalls，存放num张彩票
 * 2.3、定义构造方法，给成员变量赋值，确定入场人数，准备彩票
 * 2.4、 覆盖重写run方法（使用同步方法或同步代码块保证数据安全），按照打印要求实现功能（死循环内部嵌套 同步）	2.4.1、定义int变量count，记录每个入口进入的人数
 * 2.4.2、 所有人员都已经入场，结束循环
 * 2.4.3、 有人员入场，随机抽取一个双色球（注意：抽一个双色球，就少一个）
 * 2.4.4、 打印输出
 * 2.4.5、计数器加1
 * 2.4.6、循环结束，打印每个入口进入的人数
 * 3、定义测试类Test04
 * 3.1、创建List集合对象doubleColorBalls代表所有的双色球
 * 3.2、向List集合对象doubleColorBalls中添加所有的双色球
 * 3.3、创建线程任务EntranceTask类的对象，传递存储双色球的List集合对象doubleColorBalls,并指定入场人数
 * 3.4、创建2个Thread类的对象，传递线程任务EntranceTask类的对象并指定线程名称
 * 3.5、2个Thread类的对象分别调用start方法，开启线程
 */

import java.util.ArrayList;
import java.util.List;

public class Test {
    public static void main(String[] args) {
        //创建list集合对象doubleColorBalls代表所有的双色球
        List<String> doubleColorBalls = new ArrayList<>();
        //向list集合对象doubleColorBalls中添加所有双色球
        for (int i = 0; i < 100; i++) {
            doubleColorBalls.add(DoubleColorBallUtils.create());
        }
        //创建线程任务EntranceTask类的对象，传递存储双色球的List集合对象doubleColorBalls,并指定入场人数
        EntranceTask et = new EntranceTask(100,doubleColorBalls);
        //创建2个Thread类的对象，传递线程任务EntranceTask类的对象并指定线程名称
        Thread t1 = new Thread(et,"后门");
        Thread t2 = new Thread(et,"前门");

        t1.start();
        t2.start();
    }
}


