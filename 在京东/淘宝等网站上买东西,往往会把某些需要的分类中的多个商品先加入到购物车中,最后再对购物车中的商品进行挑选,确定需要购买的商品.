package comitheima.ThirteenDay_Test.List_Stream03;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

/**
 * ```
 * 在京东/淘宝等网站上买东西,往往会把某些需要的分类中的多个商品先加入到购物车中,最后再对购物车中的商品进行挑选,确定需要购买的商品.
 * 本案例使用List集合对象模拟购物车,Product对象代表商品,商品信息有商品编号pid,商品名称pname,商品价格price,是否下架pflag(1:下架	0:未下架),商品分类cid(商品所属分类的id:c001 代表家电,c002 代表服饰 c003 代表化妆品 )
 *
 * 使用lambda表达式和Stream流的相关知识,依次进行以下若干操作步骤:
 * 	1.想看看购物车中都有哪些商品
 *     2.对商品按照价格从高到低排序
 *     3.家电类商品都买
 *     4.其余的商品中买两件最贵的
 *     5.只要商品的名称和价格,并遍历输出
 * 初始化数据如下:
 *     List<Product> list = new ArrayList<>();
 *     list.add(new Product("p001","联想",5000,0,"c001"));
 *     list.add(new Product("p002","海尔",3000,1,"c001"));
 *     list.add(new Product("p003","雷神",5000,1,"c001"));
 *     list.add(new Product("p004","JACK JONES",800,1,"c002"));
 *     list.add(new Product("p005","真维斯",200,0,"c002"));
 *     list.add(new Product("p006","花花公子",440,0,"c002"));
 *     list.add(new Product("p007","劲霸",2000,1,"c002"));
 *     list.add(new Product("p008","香奈儿",800,1,"c003"));
 *     list.add(new Product("p009","相宜本草",200,0,"c003"));
 */

public class Test {
    public static void main(String[] args) {
        List<Product> list = new ArrayList<>();
        list.add(new Product("p001","联想",5000,0,"c001"));
        list.add(new Product("p002","海尔",3000,1,"c001"));
        list.add(new Product("p003","雷神",5000,1,"c001"));
        list.add(new Product("p004","JACK JONES",800,1,"c002"));
        list.add(new Product("p005","真维斯",200,0,"c002"));
        list.add(new Product("p006","花花公子",440,0,"c002"));
        list.add(new Product("p007","劲霸",2000,1,"c002"));
        list.add(new Product("p008","香奈儿",800,1,"c003"));
        list.add(new Product("p009","相宜本草",200,0,"c003"));

        //获取list集合对象的Stream流对象
        Stream<Product> s1 = list.stream();
        System.out.println("----------购物车中添加的商品如下----------");
        //1.想看看购物车中都有哪些商品
        list.forEach((Product p)->{
            System.out.println(p);
        });

        //2.对商品按照价格从高到低排序
        Collections.sort(list,(Product p1,Product p2)->{
            return p2.getPrice() - p1.getPrice();
        });
        //3.家电类商品都买
        Stream<Product> s2 = list.stream();
        Stream<Product> s3 = s2.filter((Product p)->{
            return p.getCid().equals("c001");
        });

        //4.其余的商品中买两件最贵的
        Stream<Product> s4 = list.stream();
        Stream<Product> s5 = s4.filter((Product p)->{
            return !p.getCid().equals("c001");
        }).limit(2);

        //5.只要商品的名称和价格
        Stream<Product> s6 = Stream.concat(s3,s5);
        Stream<String> s7 = s6.map((Product product)->{
            return product.getPname() + "::" + product.getPrice();
        });
        System.out.println("----------最后筛选后,需要购买的商品如下----------");
        s7.forEach((String pInfo)->{
            System.out.println(pInfo);
        });



    }
}


package comitheima.ThirteenDay_Test.List_Stream03;

public class Product {
    private String pid;         // id
    private String pname;       // 名字
    private Integer price;      // 商品价格
    private Integer pflag;	    // 是否下架    1:下架	0:未下架
    private String cid;         // 分类ID

    public Product() {
    }

    public Product(String pid, String pname, Integer price, Integer pflag, String cid) {
        this.pid = pid;
        this.pname = pname;
        this.price = price;
        this.pflag = pflag;
        this.cid = cid;
    }

    public String getPid() {
        return pid;
    }

    public void setPid(String pid) {
        this.pid = pid;
    }

    public String getPname() {
        return pname;
    }

    public void setPname(String pname) {
        this.pname = pname;
    }

    public Integer getPrice() {
        return price;
    }

    public void setPrice(Integer price) {
        this.price = price;
    }

    public Integer getPflag() {
        return pflag;
    }

    public void setPflag(Integer pflag) {
        this.pflag = pflag;
    }

    public String getCid() {
        return cid;
    }

    public void setCid(String cid) {
        this.cid = cid;
    }

    @Override
    public String toString() {
        return "Product{" +
                "pid='" + pid + '\'' +
                ", pname='" + pname + '\'' +
                ", price=" + price +
                ", pflag=" + pflag +
                ", cid='" + cid + '\'' +
                '}';
    }
}
